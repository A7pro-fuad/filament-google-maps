/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/filament-google-maps.js":
/*!**********************************************!*\
  !*** ./resources/js/filament-google-maps.js ***!
  \**********************************************/
/***/ (() => {

eval("function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nwindow.filamentGoogleMaps = function ($wire, config) {\n  return {\n    map: null,\n    geocoder: null,\n    marker: null,\n    markerLocation: null,\n    layers: null,\n    mapEl: null,\n    pacEl: null,\n    config: {\n      debug: false,\n      autocomplete: '',\n      autocompleteReverse: false,\n      draggable: true,\n      clickable: false,\n      defaultLocation: {\n        lat: 0,\n        lng: 0\n      },\n      statePath: '',\n      controls: {\n        mapTypeControl: true,\n        scaleControl: true,\n        streetViewControl: true,\n        rotateControl: true,\n        fullscreenControl: true,\n        searchBoxControl: false,\n        zoomControl: false\n      },\n      layers: [],\n      reverseGeocodeFields: {},\n      defaultZoom: 8,\n      gmaps: ''\n    },\n    loadGMaps: function loadGMaps() {\n      if (!document.getElementById('filament-google-maps-google-maps-js')) {\n        var script = document.createElement('script');\n        script.id = 'filament-google-maps-google-maps-js';\n        window.filamentGoogleMapsAsyncLoad = this.createMap.bind(this);\n        script.src = this.config.gmaps + '&callback=filamentGoogleMapsAsyncLoad';\n        document.head.appendChild(script);\n      } else {\n        var waitForGlobal = function waitForGlobal(key, callback) {\n          if (window[key]) {\n            callback();\n          } else {\n            setTimeout(function () {\n              waitForGlobal(key, callback);\n            }, 100);\n          }\n        };\n        waitForGlobal(\"filamentGoogleMapsAPILoaded\", function () {\n          this.createMap();\n        }.bind(this));\n      }\n    },\n    init: function init(mapEl, pacEl) {\n      this.mapEl = mapEl;\n      this.pacEl = pacEl;\n      this.config = _objectSpread(_objectSpread({}, this.config), config);\n      this.loadGMaps();\n    },\n    createMap: function createMap() {\n      var _this = this;\n      window.filamentGoogleMapsAPILoaded = true;\n      if (this.config.autocompleteReverse || Object.keys(this.config.reverseGeocodeFields).length > 0) {\n        this.geocoder = new google.maps.Geocoder();\n      }\n      this.map = new google.maps.Map(this.mapEl, _objectSpread({\n        center: this.getCoordinates(),\n        zoom: this.config.defaultZoom\n      }, this.config.controls));\n      this.marker = new google.maps.Marker({\n        draggable: this.config.draggable,\n        map: this.map\n      });\n      this.marker.setPosition(this.getCoordinates());\n      if (this.config.clickable) {\n        this.map.addListener('click', function (event) {\n          _this.markerLocation = event.latLng.toJSON();\n          _this.setCoordinates(_this.markerLocation);\n          _this.updateAutocomplete(_this.markerLocation);\n          _this.updateGeocode(_this.markerLocation);\n          //this.updateMap(this.markerLocation);\n          _this.map.panTo(_this.markerLocation);\n        });\n      }\n      if (this.config.draggable) {\n        google.maps.event.addListener(this.marker, 'dragend', function (event) {\n          _this.markerLocation = event.latLng.toJSON();\n          _this.setCoordinates(_this.markerLocation);\n          _this.updateAutocomplete(_this.markerLocation);\n          _this.updateGeocode(_this.markerLocation);\n          // this.updateMap(this.markerLocation);\n          _this.map.panTo(_this.markerLocation);\n        });\n      }\n      if (this.config.controls.searchBoxControl) {\n        var input = this.pacEl;\n        var searchBox = new google.maps.places.SearchBox(input);\n        this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);\n        searchBox.addListener(\"places_changed\", function () {\n          input.value = '';\n          _this.markerLocation = searchBox.getPlaces()[0].geometry.location;\n        });\n      }\n      var geocompleteOptions = {\n        fields: [\"formatted_address\", \"geometry\", \"name\"],\n        strictBounds: false,\n        types: [\"geocode\"]\n      };\n      if (this.config.autocomplete) {\n        var geoComplete = document.getElementById(this.config.autocomplete);\n        if (geoComplete) {\n          window.addEventListener('keydown', function (e) {\n            if (e.key === 'U+000A' || e.key === 'Enter' || e.code === 'Enter') {\n              if (e.target.nodeName === 'INPUT' && e.target.type === 'text') {\n                e.preventDefault();\n                return false;\n              }\n            }\n          }, true);\n          var autocomplete = new google.maps.places.Autocomplete(geoComplete, geocompleteOptions);\n          autocomplete.addListener(\"place_changed\", function () {\n            var place = autocomplete.getPlace();\n            if (!place.geometry || !place.geometry.location) {\n              window.alert(\"No details available for input: '\" + place.name + \"'\");\n              return;\n            }\n            if (place.geometry.viewport) {\n              _this.map.fitBounds(place.geometry.viewport);\n            } else {\n              _this.map.setCenter(place.geometry.location);\n            }\n            _this.marker.setPosition(place.geometry.location);\n            _this.markerLocation = place.geometry.location;\n            _this.setCoordinates(place.geometry.location);\n          });\n        }\n      }\n      if (this.config.layers) {\n        this.layers = this.config.layers.map(function (layerUrl) {\n          return new google.maps.KmlLayer({\n            url: layerUrl,\n            map: _this.map\n          });\n        });\n      }\n    },\n    updateMapFromAlpine: function updateMapFromAlpine() {\n      var location = this.getCoordinates();\n      var markerLocation = this.marker.getPosition();\n      if (!(location.lat === markerLocation.lat() && location.lng === markerLocation.lng())) {\n        this.updateAutocomplete(location);\n        this.updateMap(location);\n      }\n    },\n    updateMap: function updateMap(position) {\n      this.marker.setPosition(position);\n      this.map.panTo(position);\n    },\n    updateGeocode: function updateGeocode(position) {\n      var _this2 = this;\n      if (Object.keys(this.config.reverseGeocodeFields).length > 0) {\n        this.geocoder.geocode({\n          location: position\n        }).then(function (response) {\n          if (response.results[0]) {\n            //$wire.set(config.autocomplete, response.results[0].formatted_address);\n            var replacements = _this2.getReplacements(response.results[0].address_components);\n            for (var field in _this2.config.reverseGeocodeFields) {\n              var replaced = _this2.config.reverseGeocodeFields[field];\n              for (var replacement in replacements) {\n                replaced = replaced.split(replacement).join(replacements[replacement]);\n              }\n              $wire.set(field, replaced);\n            }\n          }\n        });\n      }\n    },\n    updateAutocomplete: function updateAutocomplete(position) {\n      var _this3 = this;\n      if (this.config.autocomplete && this.config.autocompleteReverse) {\n        this.geocoder.geocode({\n          location: position\n        }).then(function (response) {\n          if (response.results[0]) {\n            $wire.set(_this3.config.autocomplete, response.results[0].formatted_address);\n          }\n        });\n      }\n    },\n    setCoordinates: function setCoordinates(position) {\n      $wire.set(this.config.statePath, position, false);\n    },\n    getCoordinates: function getCoordinates() {\n      var location = $wire.get(this.config.statePath);\n      if (location === null || !location.hasOwnProperty('lat')) {\n        location = {\n          lat: this.config.defaultLocation.lat,\n          lng: this.config.defaultLocation.lng\n        };\n      }\n      return location;\n    },\n    getReplacements: function getReplacements(address_components) {\n      var symbols = {\n        '%n': [\"street_number\"],\n        '%z': [\"postal_code\"],\n        '%S': [\"street_address\", \"route\"],\n        '%A1': [\"administrative_area_level_1\"],\n        '%A2': [\"administrative_area_level_2\"],\n        '%A3': [\"administrative_area_level_3\"],\n        '%A4': [\"administrative_area_level_4\"],\n        '%A5': [\"administrative_area_level_5\"],\n        '%a1': [\"administrative_area_level_1\"],\n        '%a2': [\"administrative_area_level_2\"],\n        '%a3': [\"administrative_area_level_3\"],\n        '%a4': [\"administrative_area_level_4\"],\n        '%a5': [\"administrative_area_level_5\"],\n        '%L': [\"locality\"],\n        '%D': [\"sublocality\"],\n        '%C': [\"country\"],\n        '%c': [\"country\"]\n      };\n      var replacements = {};\n      address_components.forEach(function (component) {\n        for (var symbol in symbols) {\n          if (symbols[symbol].indexOf(component.types[0]) !== -1) {\n            if (symbol === symbol.toLowerCase()) {\n              replacements[symbol] = component.short_name;\n            } else {\n              replacements[symbol] = component.long_name;\n            }\n          }\n        }\n      });\n      if (this.config.debug) {\n        console.log(replacements);\n      }\n      return replacements;\n    }\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/filament-google-maps.js\n");

/***/ }),

/***/ "./resources/css/filament-google-maps.css":
/*!************************************************!*\
  !*** ./resources/css/filament-google-maps.css ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvY3NzL2ZpbGFtZW50LWdvb2dsZS1tYXBzLmNzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9maWxhbWVudC1nb29nbGUtbWFwcy8uL3Jlc291cmNlcy9jc3MvZmlsYW1lbnQtZ29vZ2xlLW1hcHMuY3NzP2FjZWYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/css/filament-google-maps.css\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"/cheesegrits/filament-google-maps/filament-google-maps": 0,
/******/ 			"cheesegrits/filament-google-maps/filament-google-maps": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkfilament_google_maps"] = self["webpackChunkfilament_google_maps"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	__webpack_require__.O(undefined, ["cheesegrits/filament-google-maps/filament-google-maps"], () => (__webpack_require__("./resources/js/filament-google-maps.js")))
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["cheesegrits/filament-google-maps/filament-google-maps"], () => (__webpack_require__("./resources/css/filament-google-maps.css")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;