/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/filament-google-maps.js":
/*!**********************************************!*\
  !*** ./resources/js/filament-google-maps.js ***!
  \**********************************************/
/***/ (() => {

eval("function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nwindow.filamentGoogleMaps = function ($wire, config) {\n  return {\n    map: null,\n    geocoder: null,\n    marker: null,\n    markerLocation: null,\n    layers: null,\n    mapEl: null,\n    pacEl: null,\n    config: {\n      debug: false,\n      autocomplete: '',\n      types: [],\n      countries: [],\n      placeField: 'formatted_address',\n      autocompleteReverse: false,\n      geolocate: false,\n      geolocateOnLoad: false,\n      geolocateLabel: 'Set Current Location',\n      draggable: true,\n      clickable: false,\n      defaultLocation: {\n        lat: 0,\n        lng: 0\n      },\n      statePath: '',\n      controls: {\n        mapTypeControl: true,\n        scaleControl: true,\n        streetViewControl: true,\n        rotateControl: true,\n        fullscreenControl: true,\n        searchBoxControl: false,\n        zoomControl: false\n      },\n      drawingModeL: null,\n      drawingControl: false,\n      drawingControlPosition: 6,\n      drawingModes: {\n        marker: true,\n        circle: true,\n        rectangle: true,\n        polygon: true,\n        polyline: true\n      },\n      drawingField: null,\n      layers: [],\n      geoJson: null,\n      geoJsonField: null,\n      geoJsonProperty: null,\n      geoJsonVisible: true,\n      reverseGeocodeFields: {},\n      defaultZoom: 8,\n      gmaps: ''\n    },\n    symbols: {\n      '%n': [\"street_number\"],\n      '%z': [\"postal_code\"],\n      '%S': [\"street_address\", \"route\"],\n      '%A1': [\"administrative_area_level_1\"],\n      '%A2': [\"administrative_area_level_2\"],\n      '%A3': [\"administrative_area_level_3\"],\n      '%A4': [\"administrative_area_level_4\"],\n      '%A5': [\"administrative_area_level_5\"],\n      '%a1': [\"administrative_area_level_1\"],\n      '%a2': [\"administrative_area_level_2\"],\n      '%a3': [\"administrative_area_level_3\"],\n      '%a4': [\"administrative_area_level_4\"],\n      '%a5': [\"administrative_area_level_5\"],\n      '%L': [\"locality\"],\n      '%D': [\"sublocality\"],\n      '%C': [\"country\"],\n      '%c': [\"country\"],\n      '%p': ['premise'],\n      '%P': ['premise']\n    },\n    drawingManager: null,\n    overlays: [],\n    dataLayer: null,\n    geoJsonDataLayer: null,\n    polyOptions: {\n      // strokeColor: '#f06eaa',\n      strokeColor: '#00ff00',\n      strokeOpacity: '0.5',\n      strokeWeight: 3,\n      fillOpacity: 0.45,\n      draggable: true,\n      editable: false,\n      clickable: true\n      // zIndex: 1,\n    },\n\n    selectedShape: null,\n    loadGMaps: function loadGMaps() {\n      if (!document.getElementById('filament-google-maps-google-maps-js')) {\n        var script = document.createElement('script');\n        script.id = 'filament-google-maps-google-maps-js';\n        window.filamentGoogleMapsAsyncLoad = this.createMap.bind(this);\n        script.src = this.config.gmaps + '&callback=filamentGoogleMapsAsyncLoad';\n        document.head.appendChild(script);\n      } else {\n        var waitForGlobal = function waitForGlobal(key, callback) {\n          if (window[key]) {\n            callback();\n          } else {\n            setTimeout(function () {\n              waitForGlobal(key, callback);\n            }, 100);\n          }\n        };\n        waitForGlobal(\"filamentGoogleMapsAPILoaded\", function () {\n          this.createMap();\n        }.bind(this));\n      }\n    },\n    init: function init(mapEl, pacEl) {\n      this.mapEl = mapEl;\n      this.pacEl = pacEl;\n      this.config = _objectSpread(_objectSpread({}, this.config), config);\n      this.loadGMaps();\n    },\n    createMap: function createMap() {\n      var _this = this;\n      window.filamentGoogleMapsAPILoaded = true;\n      if (this.config.autocompleteReverse || Object.keys(this.config.reverseGeocodeFields).length > 0) {\n        this.geocoder = new google.maps.Geocoder();\n      }\n      this.map = new google.maps.Map(this.mapEl, _objectSpread({\n        center: this.getCoordinates(),\n        zoom: this.config.defaultZoom\n      }, this.config.controls));\n      this.marker = new google.maps.Marker({\n        draggable: this.config.draggable,\n        map: this.map\n      });\n      this.marker.setPosition(this.getCoordinates());\n      if (this.config.clickable) {\n        this.map.addListener('click', function (event) {\n          _this.markerMoved(event);\n        });\n      }\n      if (this.config.draggable) {\n        google.maps.event.addListener(this.marker, 'dragend', function (event) {\n          _this.markerMoved(event);\n        });\n      }\n      if (this.config.controls.searchBoxControl) {\n        var input = this.pacEl;\n        var searchBox = new google.maps.places.SearchBox(input);\n        this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);\n        searchBox.addListener(\"places_changed\", function () {\n          input.value = '';\n          _this.markerLocation = searchBox.getPlaces()[0].geometry.location;\n        });\n      }\n      if (this.config.autocomplete) {\n        var geoComplete = document.getElementById(this.config.autocomplete);\n        if (geoComplete) {\n          window.addEventListener('keydown', function (e) {\n            if (e.key === 'U+000A' || e.key === 'Enter' || e.code === 'Enter') {\n              if (e.target.nodeName === 'INPUT' && e.target.type === 'text') {\n                e.preventDefault();\n                return false;\n              }\n            }\n          }, true);\n          var fields = [\"address_components\", \"formatted_address\", \"geometry\", \"name\"];\n          if (!fields.includes(this.config.placeField)) {\n            fields.push(this.config.placeField);\n          }\n          var geocompleteOptions = {\n            fields: fields,\n            strictBounds: false,\n            types: this.config.types\n          };\n          var autocomplete = new google.maps.places.Autocomplete(geoComplete, geocompleteOptions);\n          autocomplete.setComponentRestrictions({\n            country: this.config.countries\n          });\n          autocomplete.addListener(\"place_changed\", function () {\n            var place = autocomplete.getPlace();\n            if (!place.geometry || !place.geometry.location) {\n              window.alert(\"No details available for input: '\" + place.name + \"'\");\n              return;\n            }\n            if (place.geometry.viewport) {\n              _this.map.fitBounds(place.geometry.viewport);\n            } else {\n              _this.map.setCenter(place.geometry.location);\n            }\n            $wire.set(_this.config.autocomplete, place[_this.config.placeField]);\n            _this.marker.setPosition(place.geometry.location);\n            _this.markerLocation = place.geometry.location;\n            _this.setCoordinates(place.geometry.location);\n            _this.updateGeocode(_this.markerLocation);\n          });\n        }\n      }\n      if (this.config.layers) {\n        this.layers = this.config.layers.map(function (layerUrl) {\n          var kmlLayer = new google.maps.KmlLayer({\n            url: layerUrl,\n            map: _this.map\n          });\n          kmlLayer.addListener(\"click\", function (kmlEvent) {\n            var text = kmlEvent.featureData.description;\n          });\n        });\n      }\n      if (this.config.geoJson) {\n        if (this.config.geoJsonVisible) {\n          this.geoJsonDataLayer = this.map.data;\n        } else {\n          this.geoJsonDataLayer = new google.maps.Data();\n        }\n        if (/^http/.test(this.config.geoJson)) {\n          this.geoJsonDataLayer.loadGeoJson(this.config.geoJson);\n        } else {\n          this.geoJsonDataLayer.addGeoJson(JSON.parse(this.config.geoJson));\n        }\n      }\n      if (this.config.geolocateOnLoad) {\n        this.getLocation();\n      }\n      if (this.config.geolocate && \"geolocation\" in navigator) {\n        var locationButton = document.createElement(\"button\");\n        locationButton.textContent = this.config.geolocateLabel;\n        locationButton.classList.add(\"custom-map-control-button\");\n        this.map.controls[google.maps.ControlPosition.TOP_CENTER].push(locationButton);\n        locationButton.addEventListener(\"click\", function (e) {\n          e.preventDefault();\n          _this.getLocation();\n        });\n      }\n      if (this.config.drawingControl) {\n        this.map.data.setStyle({\n          clickable: false,\n          cursor: null,\n          draggable: false,\n          editable: false,\n          fillOpacity: 0.0,\n          visible: false\n          // zIndex: 0\n        });\n\n        this.drawingManager = new google.maps.drawing.DrawingManager({\n          drawingMode: null,\n          drawingControl: true,\n          drawingControlOptions: {\n            position: this.config.drawingControlPosition,\n            drawingModes: [].concat(_toConsumableArray(this.config.drawingModes.marker ? [google.maps.drawing.OverlayType.MARKER] : []), _toConsumableArray(this.config.drawingModes.circle ? [google.maps.drawing.OverlayType.CIRCLE] : []), _toConsumableArray(this.config.drawingModes.polygon ? [google.maps.drawing.OverlayType.POLYGON] : []), _toConsumableArray(this.config.drawingModes.polyline ? [google.maps.drawing.OverlayType.POLYLINE] : []), _toConsumableArray(this.config.drawingModes.rectangle ? [google.maps.drawing.OverlayType.RECTANGLE] : []))\n          },\n          markerOptions: {\n            draggable: true\n          },\n          polylineOptions: {\n            draggable: true,\n            editable: false\n          },\n          rectangleOptions: this.polyOptions,\n          circleOptions: this.polyOptions,\n          polygonOptions: this.polyOptions\n        });\n        this.drawingManager.setMap(this.map);\n        google.maps.event.addListener(this.drawingManager, 'drawingmode_changed', function () {\n          _this.clearSelection();\n        });\n        // google.maps.event.addListener(this.map, 'click', () => {\n        //     this.clearSelection()\n        // });\n\n        if (this.config.drawingField) {\n          this.dataLayer = new google.maps.Data();\n          var geoJSON = $wire.get(this.config.drawingField);\n          geoJSON && this.loadFeaturesCollection(JSON.parse(geoJSON));\n          google.maps.event.addListener(this.drawingManager, 'overlaycomplete', function (event) {\n            event.overlay.type = event.type;\n            event.overlay.id = _this.guid();\n            event.overlay.feature = _this.instanceFeature(event.overlay);\n            _this.addOverlayEvents(event.overlay);\n            _this.overlays.push(event.overlay);\n            if (event.type != google.maps.drawing.OverlayType.MARKER) {\n              // Switch back to non-drawing mode after drawing a shape.\n              _this.drawingManager.setDrawingMode(null);\n              _this.setSelection(event.overlay);\n            }\n            _this.drawingModified();\n          });\n        }\n      }\n    },\n    markerMoved: function markerMoved(event) {\n      this.geoJsonContains(event.latLng);\n      this.markerLocation = event.latLng.toJSON();\n      this.setCoordinates(this.markerLocation);\n      this.updateAutocomplete(this.markerLocation);\n      this.updateGeocode(this.markerLocation);\n      // this.updateMap(this.markerLocation);\n      this.map.panTo(this.markerLocation);\n    },\n    updateMapFromAlpine: function updateMapFromAlpine() {\n      var location = this.getCoordinates();\n      var markerLocation = this.marker.getPosition();\n      if (!(location.lat === markerLocation.lat() && location.lng === markerLocation.lng())) {\n        this.updateAutocomplete(location);\n        this.updateMap(location);\n      }\n    },\n    updateMap: function updateMap(position) {\n      this.marker.setPosition(position);\n      this.map.panTo(position);\n    },\n    updateGeocode: function updateGeocode(position) {\n      var _this2 = this;\n      if (Object.keys(this.config.reverseGeocodeFields).length > 0) {\n        this.geocoder.geocode({\n          location: position\n        }).then(function (response) {\n          if (response.results[0]) {\n            //$wire.set(config.autocomplete, response.results[0].formatted_address);\n            var replacements = _this2.getReplacements(response.results[0].address_components);\n            for (var field in _this2.config.reverseGeocodeFields) {\n              var replaced = _this2.config.reverseGeocodeFields[field];\n              for (var replacement in replacements) {\n                replaced = replaced.split(replacement).join(replacements[replacement]);\n              }\n              for (var symbol in _this2.symbols) {\n                replaced = replaced.split(symbol).join('');\n              }\n              replaced = replaced.trim();\n              $wire.set(field, replaced);\n            }\n          }\n        })[\"catch\"](function (error) {\n          console.log(error.message);\n        });\n      }\n    },\n    updateAutocomplete: function updateAutocomplete(position) {\n      var _this3 = this;\n      if (this.config.autocomplete && this.config.autocompleteReverse) {\n        this.geocoder.geocode({\n          location: position\n        }).then(function (response) {\n          if (response.results[0]) {\n            $wire.set(_this3.config.autocomplete, response.results[0].formatted_address);\n          }\n        })[\"catch\"](function (error) {\n          console.log(error.message);\n        });\n      }\n    },\n    setCoordinates: function setCoordinates(position) {\n      $wire.set(this.config.statePath, position);\n    },\n    getCoordinates: function getCoordinates() {\n      var location = $wire.get(this.config.statePath);\n      if (location === null || !location.hasOwnProperty('lat')) {\n        location = {\n          lat: this.config.defaultLocation.lat,\n          lng: this.config.defaultLocation.lng\n        };\n      }\n      return location;\n    },\n    getLocation: function getLocation() {\n      var _this4 = this;\n      navigator.geolocation.getCurrentPosition(function (position) {\n        _this4.markerLocation = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n        _this4.setCoordinates(_this4.markerLocation);\n        _this4.updateAutocomplete(_this4.markerLocation);\n        _this4.updateGeocode(_this4.markerLocation);\n        _this4.map.panTo(_this4.markerLocation);\n      });\n    },\n    getReplacements: function getReplacements(address_components) {\n      var _this5 = this;\n      var replacements = {};\n      address_components.forEach(function (component) {\n        for (var symbol in _this5.symbols) {\n          if (_this5.symbols[symbol].indexOf(component.types[0]) !== -1) {\n            if (symbol === symbol.toLowerCase()) {\n              replacements[symbol] = component.short_name;\n            } else {\n              replacements[symbol] = component.long_name;\n            }\n          }\n        }\n      });\n      if (this.config.debug) {\n        console.log(replacements);\n      }\n      return replacements;\n    },\n    instanceOverlay: function instanceOverlay(feature) {\n      var instance = null;\n      switch (feature.properties.type) {\n        case google.maps.drawing.OverlayType.MARKER:\n          instance = new google.maps.Marker({\n            id: feature.properties.id,\n            type: feature.properties.type,\n            position: new google.maps.LatLng(feature.geometry.coordinates[1], feature.geometry.coordinates[0]),\n            draggable: true\n          });\n          break;\n        case google.maps.drawing.OverlayType.RECTANGLE:\n          var NE = new google.maps.LatLng(feature.geometry.coordinates[0][2][1], feature.geometry.coordinates[0][2][0]);\n          var SW = new google.maps.LatLng(feature.geometry.coordinates[0][0][1], feature.geometry.coordinates[0][0][0]);\n          instance = new google.maps.Rectangle(Object.assign({}, this.polyOptions, {\n            id: feature.properties.id,\n            type: feature.properties.type,\n            // fillColor: feature.properties.color,\n            bounds: new google.maps.LatLngBounds(SW, NE),\n            editable: false\n          }));\n          break;\n        case google.maps.drawing.OverlayType.POLYGON:\n          instance = new google.maps.Polygon(Object.assign({}, this.polyOptions, {\n            id: feature.properties.id,\n            type: feature.properties.type,\n            // fillColor: feature.properties.color,\n            paths: this.transformToMVCArray(feature.geometry.coordinates),\n            editable: false\n          }));\n          break;\n        case google.maps.drawing.OverlayType.POLYLINE:\n          instance = new google.maps.Polyline({\n            id: feature.properties.id,\n            type: feature.properties.type,\n            // strokeColor: feature.properties.color,\n            path: this.transformToMVCArray([feature.geometry.coordinates]).getAt(0),\n            draggable: true,\n            editable: false\n          });\n          break;\n        case google.maps.drawing.OverlayType.CIRCLE:\n          instance = new google.maps.Circle(Object.assign({}, this.polyOptions, {\n            id: feature.properties.id,\n            type: feature.properties.type,\n            // fillColor: feature.properties.color,\n            center: new google.maps.LatLng(feature.geometry.coordinates[1], feature.geometry.coordinates[0]),\n            radius: feature.properties.radius,\n            editable: false\n          }));\n          break;\n      }\n      // instance.zIndex = this.overlays.length + 1;\n      return instance;\n    },\n    instanceFeature: function instanceFeature(overlay) {\n      var calculatedOverlay = this.calculateGeometry(overlay);\n      return this.dataLayer.add(new google.maps.Data.Feature({\n        geometry: calculatedOverlay.geometry,\n        properties: Object.assign({\n          id: this.guid(),\n          type: overlay.type\n        }, calculatedOverlay.hasOwnProperty('properties') ? calculatedOverlay.properties : {})\n      }));\n    },\n    calculateGeometry: function calculateGeometry(overlay, geometryOnly) {\n      switch (overlay.type) {\n        case google.maps.drawing.OverlayType.MARKER:\n          return geometryOnly ? new google.maps.Data.Point(overlay.getPosition()) : {\n            geometry: new google.maps.Data.Point(overlay.getPosition())\n          };\n        case google.maps.drawing.OverlayType.RECTANGLE:\n          var b = overlay.getBounds(),\n            p = [b.getSouthWest(), {\n              lat: b.getSouthWest().lat(),\n              lng: b.getNorthEast().lng()\n            }, b.getNorthEast(), {\n              lng: b.getSouthWest().lng(),\n              lat: b.getNorthEast().lat()\n            }];\n          return geometryOnly ? new google.maps.Data.Polygon([p]) : {\n            geometry: new google.maps.Data.Polygon([p])\n          };\n        case google.maps.drawing.OverlayType.POLYGON:\n          return geometryOnly ? new google.maps.Data.Polygon([overlay.getPath().getArray()]) : {\n            geometry: new google.maps.Data.Polygon([overlay.getPath().getArray()])\n          };\n        case google.maps.drawing.OverlayType.POLYLINE:\n          return geometryOnly ? new google.maps.Data.LineString(overlay.getPath().getArray()) : {\n            geometry: new google.maps.Data.LineString(overlay.getPath().getArray())\n          };\n        case google.maps.drawing.OverlayType.CIRCLE:\n          return geometryOnly ? new google.maps.Data.Point(overlay.getCenter()) : {\n            properties: {\n              radius: overlay.getRadius()\n            },\n            geometry: new google.maps.Data.Point(overlay.getCenter())\n          };\n      }\n    },\n    transformToMVCArray: function transformToMVCArray(a) {\n      var clone = new google.maps.MVCArray();\n      function transform($a, parent) {\n        if ($a.length == 2 && !Array.isArray($a[0]) && !Array.isArray($a[1])) parent.push(new google.maps.LatLng($a[1], $a[0]));\n        for (var _a = 0; _a < $a.length; _a++) {\n          if (!Array.isArray($a[_a])) continue;\n          transform($a[_a], parent ? $a[_a].length == 2 && !Array.isArray($a[_a][0]) && !Array.isArray($a[_a][1]) ? parent : parent.getAt(parent.push(new google.maps.MVCArray()) - 1) : clone.getAt(clone.push(new google.maps.MVCArray()) - 1));\n        }\n      }\n      function isMVCArray(array) {\n        return array instanceof google.maps.MVCArray;\n      }\n      transform(a);\n      return clone;\n    },\n    loadFeaturesCollection: function loadFeaturesCollection(geoJSON) {\n      var _this6 = this;\n      if (Array.isArray(geoJSON.features) && geoJSON.features.length > 0) {\n        (function () {\n          var bounds = new google.maps.LatLngBounds();\n          for (var f = 0; f < geoJSON.features.length; f++) {\n            var overlay = _this6.instanceOverlay(geoJSON.features[f]);\n            overlay.feature = _this6.instanceFeature(overlay);\n            _this6.addOverlayEvents(overlay);\n            overlay.feature.getGeometry().forEachLatLng(function (latlng) {\n              bounds.extend(latlng);\n            });\n            // overlay.feature.setProperty(\"color\", features[f].properties.color);\n            overlay.setMap(_this6.map);\n            _this6.overlays.push(overlay);\n          }\n          _this6.map.fitBounds(bounds);\n        })();\n      }\n    },\n    addOverlayEvents: function addOverlayEvents(overlay) {\n      var _this7 = this;\n      switch (overlay.type) {\n        case google.maps.drawing.OverlayType.POLYLINE:\n          google.maps.event.addListener(overlay.getPath(), 'set_at', function () {\n            if (!overlay.drag) {\n              overlay.feature.setGeometry(_this7.calculateGeometry(overlay, true));\n              _this7.drawingModified();\n            }\n          });\n          google.maps.event.addListener(overlay.getPath(), 'insert_at', function () {\n            overlay.feature.setGeometry(_this7.calculateGeometry(overlay, true));\n            _this7.drawingModified();\n          });\n          google.maps.event.addListener(overlay.getPath(), 'remove_at', function () {\n            overlay.feature.setGeometry(_this7.calculateGeometry(overlay, true));\n            _this7.drawingModified();\n          });\n          break;\n        case google.maps.drawing.OverlayType.POLYGON:\n          var paths = overlay.getPaths();\n          for (var p = 0; p < paths.getLength(); p++) {\n            for (var sp = 0; sp < paths.getAt(p).getLength(); sp++) {\n              google.maps.event.addListener(paths.getAt(p), 'set_at', function () {\n                if (!overlay.drag) {\n                  overlay.feature.setGeometry(_this7.calculateGeometry(overlay, true));\n                  _this7.drawingModified();\n                }\n              });\n              google.maps.event.addListener(paths.getAt(p), 'insert_at', function () {\n                overlay.feature.setGeometry(_this7.calculateGeometry(overlay, true));\n                _this7.drawingModified();\n              });\n              google.maps.event.addListener(paths.getAt(p), 'remove_at', function () {\n                overlay.feature.setGeometry(_this7.calculateGeometry(overlay, true));\n                _this7.drawingModified();\n              });\n            }\n          }\n          break;\n        case google.maps.drawing.OverlayType.RECTANGLE:\n          google.maps.event.addListener(overlay, 'bounds_changed', function () {\n            if (!overlay.drag) {\n              overlay.feature.setGeometry(_this7.calculateGeometry(overlay, true));\n              _this7.drawingModified();\n            }\n          });\n          break;\n        case google.maps.drawing.OverlayType.CIRCLE:\n          google.maps.event.addListener(overlay, 'radius_changed', function () {\n            overlay.feature.setProperty('radius', _this7.calculateGeometry(overlay).properties.radius);\n            _this7.drawingModified();\n          });\n          break;\n      }\n      if (overlay.type !== google.maps.drawing.OverlayType.MARKER) {\n        var self = this;\n        google.maps.event.addListener(overlay, 'click', function (event) {\n          self.setSelection(this);\n        });\n      }\n      google.maps.event.addListener(overlay, 'dragstart', function () {\n        overlay.drag = true;\n      });\n      google.maps.event.addListener(overlay, 'mouseup', function () {\n        if (overlay.drag) {\n          overlay.drag = false;\n          overlay.feature.setGeometry(_this7.calculateGeometry(overlay, true));\n          _this7.drawingModified();\n        }\n      });\n    },\n    drawingModified: function drawingModified() {\n      var _this8 = this;\n      if (this.config.drawingField) {\n        this.dataLayer.toGeoJson(function (obj) {\n          $wire.set(_this8.config.drawingField, JSON.stringify(obj));\n        });\n      }\n    },\n    guid: function guid() {\n      function s4() {\n        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n      }\n      return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n    },\n    setSelection: function setSelection(shape) {\n      this.clearSelection();\n      this.selectedShape = shape;\n      // shape.setEditable(true);\n      // selectColor(shape.get('fillColor') || shape.get('strokeColor'));\n      this.overlays.forEach(function (item) {\n        if (shape && item.id == shape.id) {\n          if (item.getEditable()) {\n            shape.setOptions({\n              strokeColor: '#00ff00',\n              strokeOpacity: '0.5'\n            });\n          } else {\n            shape.setOptions({\n              strokeColor: '#ff0000',\n              strokeOpacity: '0.8'\n            });\n          }\n          item.setEditable(!item.getEditable());\n        } else {\n          item.setEditable(false);\n        }\n      });\n    },\n    clearSelection: function clearSelection() {\n      this.selectedShape = null;\n      this.overlays.forEach(function (item) {\n        item.setEditable(false);\n        item.setOptions({\n          // strokeColor: '#f06eaa'\n          strokeColor: '#00ff00',\n          strokeOpacity: '0.5'\n        });\n      });\n    },\n    geoJsonContains: function geoJsonContains(latLng) {\n      var _this9 = this;\n      if (this.config.geoJson && this.config.geoJsonField) {\n        var features = [];\n        var dataLayer = new google.maps.Data();\n        this.geoJsonDataLayer.forEach(function (feature) {\n          if (feature.getGeometry().getType() === 'Polygon') {\n            var poly = new google.maps.Polygon({\n              path: feature.getGeometry().getAt(0).getArray()\n            });\n            if (google.maps.geometry.poly.containsLocation(latLng, poly)) {\n              if (_this9.config.geoJsonProperty) {\n                features.push(feature.getProperty(_this9.config.geoJsonProperty));\n              } else {\n                dataLayer.add(feature);\n              }\n            }\n          }\n        });\n        var fieldContent;\n        if (this.config.geoJsonProperty) {\n          fieldContent = JSON.stringify(features);\n          $wire.set(this.config.geoJsonField, fieldContent);\n        } else {\n          dataLayer.toGeoJson(function (gj) {\n            fieldContent = JSON.stringify(gj);\n            $wire.set(_this9.config.geoJsonField, fieldContent);\n          });\n        }\n      }\n    }\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/filament-google-maps.js\n");

/***/ }),

/***/ "./resources/css/filament-google-maps.css":
/*!************************************************!*\
  !*** ./resources/css/filament-google-maps.css ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvY3NzL2ZpbGFtZW50LWdvb2dsZS1tYXBzLmNzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9maWxhbWVudC1nb29nbGUtbWFwcy8uL3Jlc291cmNlcy9jc3MvZmlsYW1lbnQtZ29vZ2xlLW1hcHMuY3NzP2FjZWYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/css/filament-google-maps.css\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"/cheesegrits/filament-google-maps/filament-google-maps": 0,
/******/ 			"cheesegrits/filament-google-maps/filament-google-maps": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkfilament_google_maps"] = self["webpackChunkfilament_google_maps"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	__webpack_require__.O(undefined, ["cheesegrits/filament-google-maps/filament-google-maps"], () => (__webpack_require__("./resources/js/filament-google-maps.js")))
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["cheesegrits/filament-google-maps/filament-google-maps"], () => (__webpack_require__("./resources/css/filament-google-maps.css")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;