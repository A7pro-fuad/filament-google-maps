/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/filament-google-geocomplete.js":
/*!*****************************************************!*\
  !*** ./resources/js/filament-google-geocomplete.js ***!
  \*****************************************************/
/***/ (() => {

eval("function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nwindow.filamentGoogleGeocomplete = function ($wire, config) {\n  return {\n    geocoder: null,\n    mapEl: null,\n    config: {\n      statePath: '',\n      gmaps: '',\n      filterName: null\n    },\n    loadGMaps: function loadGMaps() {\n      if (!document.getElementById('filament-google-maps-google-maps-js')) {\n        var script = document.createElement('script');\n        script.id = 'filament-google-maps-google-maps-js';\n        window.filamentGoogleMapsAsyncLoad = this.createAutocomplete.bind(this);\n        script.src = this.config.gmaps + '&callback=filamentGoogleMapsAsyncLoad';\n        document.head.appendChild(script);\n      } else {\n        var waitForGlobal = function waitForGlobal(key, callback) {\n          if (window[key]) {\n            callback();\n          } else {\n            setTimeout(function () {\n              waitForGlobal(key, callback);\n            }, 100);\n          }\n        };\n        waitForGlobal(\"filamentGoogleMapsAPILoaded\", function () {\n          this.createAutocomplete();\n        }.bind(this));\n      }\n    },\n    init: function init(mapEl) {\n      this.mapEl = mapEl;\n      this.config = _objectSpread(_objectSpread({}, this.config), config);\n      this.loadGMaps();\n    },\n    createAutocomplete: function createAutocomplete() {\n      var _this = this;\n      window.filamentGoogleMapsAPILoaded = true;\n      var geocompleteOptions = {\n        fields: [\"formatted_address\", \"geometry\", \"name\"],\n        strictBounds: false,\n        types: [\"geocode\"]\n      };\n      var geoComplete = document.getElementById(this.config.statePath);\n      if (geoComplete) {\n        window.addEventListener('keydown', function (e) {\n          if (e.key === 'U+000A' || e.key === 'Enter' || e.code === 'Enter') {\n            if (e.target.nodeName === 'INPUT' && e.target.type === 'text') {\n              e.preventDefault();\n              return false;\n            }\n          }\n        }, true);\n        var autocomplete = new google.maps.places.Autocomplete(geoComplete, geocompleteOptions);\n        autocomplete.addListener(\"place_changed\", function () {\n          var place = autocomplete.getPlace();\n          if (!place.geometry || !place.geometry.location) {\n            window.alert(\"No details available for input: '\" + place.name + \"'\");\n            return;\n          }\n          _this.setCoordinates(place);\n        });\n      }\n    },\n    setCoordinates: function setCoordinates(place) {\n      //$wire.set(this.config.statePath, position, false);\n      $wire.set(this.config.statePath, place.formatted_address);\n      if (this.config.filterName) {\n        var latPath = this.config.filterName + '.latitude';\n        var lngPath = this.config.filterName + '.longitude';\n        var lat = document.getElementById(latPath);\n        var lng = document.getElementById(lngPath);\n        if (lat && lng) {\n          lat.setAttribute('value', place.geometry.location.lat().toString());\n          lng.setAttribute('value', place.geometry.location.lng().toString());\n          $wire.set(latPath, place.geometry.location.lat().toString());\n          $wire.set(lngPath, place.geometry.location.lng().toString());\n        }\n      }\n    }\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/filament-google-geocomplete.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/filament-google-geocomplete.js"]();
/******/ 	
/******/ })()
;